reference : https://www.javainuse.com/spring/boot-transaction

---------------------------------------------------------------------------

dependencies : JDBC API & MySQL Driver

    		<dependency>
    			<groupId>org.springframework.boot</groupId>
    			<artifactId>spring-boot-starter-jdbc</artifactId>
    		</dependency>

    		<dependency>
    			<groupId>mysql</groupId>
    			<artifactId>mysql-connector-java</artifactId>
    			<scope>runtime</scope>
    		</dependency>

---------------------------------------------------------------------------

What are Database Transactions?
    A Database transaction is a single logical unit of work which 
    accesses and possibly modifies the contents of a database.

    Let us check this for the mysql database.
    
    Open two separate windows for the mysql database.

    In one mysql window create a database named test and in it a table named employee

    By default the transactions are autocommit for mysql database.
    We will disable autocommit using following command- SET autocommit = 0

    In first mysql window use the following insert commands- 
    If we now using the second mysql window do a select 
    for the employee table we will not see any records. 

    This is because the transactions are still not committed in the first mysql window.

    We now use the commit command in the first MySQL command. 
    If we now using the second mysql window do a select 
    for the employee table we will see the two records.

---------------------------------------------------------------------------

Let us now use application transaction for Spring Boot JDBC project.
    We will be developing a Spring Boot + JDBC project for employee management. 

    It will be having 3 services-
        EmployeeService - The service will perform Employee Operations
        HealthInsuranceService - The service will perform Employee Health Insurance Operations
        OrganizationService - The service will perform Organization Level Operation like Employee joining and exit.
                              It makes use of the EmployeeService and HealthInsuranceService

              -----------------------------------------------------------
              |                  | OrganizationService |                |
              |                  -----------------------                |
              |                                                         |
              V                                                         V
    -----------------------                                 --------------------------          
    | EmployeeService     |                                 | HealthInsuranceService |          
    -----------------------                                 --------------------------    
    
    An application transaction is a sequence of application actions 
    that are considered as a single logical unit by the application. 
    
    For our application the joinOrganization method 
    will be considered as one complete transaction. 
    
    joinOrganization consists of two actions-
            Persist Employee Information
            Persist HealthInsurance Information     

    If due to any reason any one of the above action fails 
    then the other action should also be roll backed. 

    So if Employee Information gets inserted but suppose due 
    to some reason persist HealthInsurance is not successful, 
    then Employee Information should also be rollbacked. 
    
    It means it is all or none for a logical unit of work. 

    Similar will be the case for exitOrganization Method 
    which will be considered as one unit of work.   

    Initially we will not be using any transaction management. 
    By default the spring boot transaction is auto commit. 
    But this is not a good practice we will see why in the next section.                             

---------------------------------------------------------------------------

open cmd then create docker container on port 3307
        docker run -d -e MYSQL_ROOT_PASSWORD=PASSWORD -p:3307:3306 mysql:8.0.18

        C:\Users\donat>docker run -d -e MYSQL_ROOT_PASSWORD=PASSWORD -p:3307:3306 mysql:8.0.18
        0319d6f67d15baf75f503d081228f0274a2f09b966514fa0ff84077ca8145935

        (note the first 3 characters that will appear)  031

    create bootdb database
        docker exec -it (first 3 characters) bash
        mysql -u root -p
        PASSWORD
        create database bootdb;

        C:\Users\donat>docker exec -it 031 bash
        root@0319d6f67d15:/# mysql -u root -p
        Enter password:
        Welcome to the MySQL monitor.  Commands end with ; or \g.
        Your MySQL connection id is 8
        Server version: 8.0.18 MySQL Community Server - GPL

        Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.

        Oracle is a registered trademark of Oracle Corporation and/or its
        affiliates. Other names may be trademarks of their respective
        owners.

        Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

        mysql> create database bootdb;
        Query OK, 1 row affected (0.01 sec)

        mysql> show databases;
        +--------------------+
        | Database           |
        +--------------------+
        | bootdb             |
        | information_schema |
        | mysql              |
        | performance_schema |
        | sys                |
        +--------------------+
        5 rows in set (0.01 sec)

    or check if there is existing docker container then create the bootdb database
        docker ps -a (note the first 3 characters with mysql IMAGE NAMES : 031)
        docker start 031
        docker exec -it 031 bash
        mysql -u root -p
        PASSWORD

        C:\Users\donat>docker ps -a
        CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS                      PORTS                    NAMES
        0319d6f67d15        mysql:8.0.18          "docker-entrypoint.s…"   4 minutes ago       Exited (0) 11 seconds ago                            practical_chaplygin
        6fd205b72a05        mariadb/server:10.3   "docker-entrypoint.s…"   2 days ago          Up 19 minutes               0.0.0.0:3306->3306/tcp   77-lilo-editor_db_1

        C:\Users\donat>docker start 031
        031

        C:\Users\donat>docker exec -it 031 bash
        root@0319d6f67d15:/# mysql -u root -p
        Enter password:
        Welcome to the MySQL monitor.  Commands end with ; or \g.
        Your MySQL connection id is 8
        Server version: 8.0.18 MySQL Community Server - GPL

        Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.

        Oracle is a registered trademark of Oracle Corporation and/or its
        affiliates. Other names may be trademarks of their respective
        owners.

        Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

        mysql>

    create bootdb database (see above)

---------------------------------------------------------------------------

Create the application.properties as follows -

    spring.datasource.url=jdbc:mysql://localhost:3307/bootdb
    spring.datasource.username=root
    spring.datasource.password=PASSWORD

    #required
    spring.datasource.platform=mysql
    spring.datasource.initialization-mode=always
    logging.level.org.springframework=DEBUG

    with logging.level.org.springframework=DEBUG

    "C:\Program Files\Java\jdk-13\bin\java.exe" "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2019.2.3\lib\idea_rt.jar=65317:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2019.2.3\bin" -Dfile.encoding=UTF-8 -classpath C:\Users\donat\Downloads\spring-boot-transaction\target\classes;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\2.3.2.RELEASE\spring-boot-starter-jdbc-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot-starter\2.3.2.RELEASE\spring-boot-starter-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot\2.3.2.RELEASE\spring-boot-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-context\5.2.8.RELEASE\spring-context-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-aop\5.2.8.RELEASE\spring-aop-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-expression\5.2.8.RELEASE\spring-expression-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\2.3.2.RELEASE\spring-boot-autoconfigure-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot-starter-logging\2.3.2.RELEASE\spring-boot-starter-logging-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\ch\qos\logback\logback-classic\1.2.3\logback-classic-1.2.3.jar;C:\Users\donat\.m2\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar;C:\Users\donat\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.13.3\log4j-to-slf4j-2.13.3.jar;C:\Users\donat\.m2\repository\org\apache\logging\log4j\log4j-api\2.13.3\log4j-api-2.13.3.jar;C:\Users\donat\.m2\repository\org\slf4j\jul-to-slf4j\1.7.30\jul-to-slf4j-1.7.30.jar;C:\Users\donat\.m2\repository\jakarta\annotation\jakarta.annotation-api\1.3.5\jakarta.annotation-api-1.3.5.jar;C:\Users\donat\.m2\repository\org\yaml\snakeyaml\1.26\snakeyaml-1.26.jar;C:\Users\donat\.m2\repository\com\zaxxer\HikariCP\3.4.5\HikariCP-3.4.5.jar;C:\Users\donat\.m2\repository\org\slf4j\slf4j-api\1.7.30\slf4j-api-1.7.30.jar;C:\Users\donat\.m2\repository\org\springframework\spring-jdbc\5.2.8.RELEASE\spring-jdbc-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-beans\5.2.8.RELEASE\spring-beans-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-tx\5.2.8.RELEASE\spring-tx-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\mysql\mysql-connector-java\8.0.21\mysql-connector-java-8.0.21.jar;C:\Users\donat\.m2\repository\org\springframework\spring-core\5.2.8.RELEASE\spring-core-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-jcl\5.2.8.RELEASE\spring-jcl-5.2.8.RELEASE.jar com.example.springboottransaction.SpringBootTransactionApplication
    2020-07-25 21:11:55.259 DEBUG 14668 --- [           main] .c.l.ClasspathLoggingApplicationListener : Application started with classpath: unknown

      .   ____          _            __ _ _
     /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      '  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::        (v2.3.2.RELEASE)

    2020-07-25 21:11:55.330  INFO 14668 --- [           main] c.e.s.SpringBootTransactionApplication   : Starting SpringBootTransactionApplication on DESKTOP-ADOT1IA with PID 14668 (C:\Users\donat\Downloads\spring-boot-transaction\target\classes started by donat in C:\Users\donat\Downloads\spring-boot-transaction)
    2020-07-25 21:11:55.330  INFO 14668 --- [           main] c.e.s.SpringBootTransactionApplication   : No active profile set, falling back to default profiles: default
    2020-07-25 21:11:55.330 DEBUG 14668 --- [           main] o.s.boot.SpringApplication               : Loading source class com.example.springboottransaction.SpringBootTransactionApplication
    2020-07-25 21:11:55.375 DEBUG 14668 --- [           main] o.s.b.c.c.ConfigFileApplicationListener  : Loaded config file 'file:/C:/Users/donat/Downloads/spring-boot-transaction/target/classes/application.properties' (classpath:/application.properties)
    2020-07-25 21:11:55.375 DEBUG 14668 --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@762ef0ea
    2020-07-25 21:11:55.390 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
    2020-07-25 21:11:55.401 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory'
    2020-07-25 21:11:55.464 DEBUG 14668 --- [           main] o.s.c.a.ClassPathBeanDefinitionScanner   : Identified candidate component class: file [C:\Users\donat\Downloads\spring-boot-transaction\target\classes\com\example\springboottransaction\repository\EmployeeDaoImpl.class]
    2020-07-25 21:11:55.465 DEBUG 14668 --- [           main] o.s.c.a.ClassPathBeanDefinitionScanner   : Identified candidate component class: file [C:\Users\donat\Downloads\spring-boot-transaction\target\classes\com\example\springboottransaction\repository\HealthInsuranceImpl.class]
    2020-07-25 21:11:55.467 DEBUG 14668 --- [           main] o.s.c.a.ClassPathBeanDefinitionScanner   : Identified candidate component class: file [C:\Users\donat\Downloads\spring-boot-transaction\target\classes\com\example\springboottransaction\service\EmployeeServiceImpl.class]
    2020-07-25 21:11:55.468 DEBUG 14668 --- [           main] o.s.c.a.ClassPathBeanDefinitionScanner   : Identified candidate component class: file [C:\Users\donat\Downloads\spring-boot-transaction\target\classes\com\example\springboottransaction\service\HealthInsuranceServiceImpl.class]
    2020-07-25 21:11:55.469 DEBUG 14668 --- [           main] o.s.c.a.ClassPathBeanDefinitionScanner   : Identified candidate component class: file [C:\Users\donat\Downloads\spring-boot-transaction\target\classes\com\example\springboottransaction\service\OrganizationServiceImpl.class]
    2020-07-25 21:11:55.601 DEBUG 14668 --- [           main] o.s.c.e.PropertySourcesPropertyResolver  : Found key 'spring.datasource.url' in PropertySource 'configurationProperties' with value of type String
    2020-07-25 21:11:55.836 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'propertySourcesPlaceholderConfigurer'
    2020-07-25 21:11:55.840 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerProcessor'
    2020-07-25 21:11:55.841 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerFactory'
    2020-07-25 21:11:55.841 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.transaction.config.internalTransactionalEventListenerFactory'
    2020-07-25 21:11:55.843 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
    2020-07-25 21:11:55.845 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
    2020-07-25 21:11:55.848 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor'
    2020-07-25 21:11:55.848 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.context.internalConfigurationPropertiesBinder'
    2020-07-25 21:11:55.848 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.context.internalConfigurationPropertiesBinderFactory'
    2020-07-25 21:11:55.850 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'dataSourceInitializerPostProcessor'
    2020-07-25 21:11:55.859 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'persistenceExceptionTranslationPostProcessor'
    2020-07-25 21:11:55.862 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Autowiring by type from bean name 'persistenceExceptionTranslationPostProcessor' via factory method to bean named 'environment'
    2020-07-25 21:11:55.867 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.aop.config.internalAutoProxyCreator'
    2020-07-25 21:11:55.887 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'springBootTransactionApplication'
    2020-07-25 21:11:55.888 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
    2020-07-25 21:11:55.888 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration'
    2020-07-25 21:11:55.897 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'transactionAttributeSource'
    2020-07-25 21:11:55.900 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'transactionInterceptor'
    2020-07-25 21:11:55.901 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Autowiring by type from bean name 'transactionInterceptor' via factory method to bean named 'transactionAttributeSource'
    2020-07-25 21:11:55.906 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Autowiring by type from bean name 'org.springframework.transaction.config.internalTransactionAdvisor' via factory method to bean named 'transactionAttributeSource'
    2020-07-25 21:11:55.907 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Autowiring by type from bean name 'org.springframework.transaction.config.internalTransactionAdvisor' via factory method to bean named 'transactionInterceptor'
    2020-07-25 21:11:55.911 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'employeeDaoImpl'
    2020-07-25 21:11:55.915 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'dataSource'
    2020-07-25 21:11:55.916 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari'
    2020-07-25 21:11:55.917 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties'
    2020-07-25 21:11:55.921 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.context.properties.BoundConfigurationProperties'
    2020-07-25 21:11:55.944 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Autowiring by type from bean name 'dataSource' via factory method to bean named 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties'
    2020-07-25 21:11:55.985 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker'
    2020-07-25 21:11:55.990 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Autowiring by type from bean name 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' via constructor to bean named 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties'
    2020-07-25 21:11:55.991 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Autowiring by type from bean name 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' via constructor to bean named 'org.springframework.context.annotation.AnnotationConfigApplicationContext@762ef0ea'
    2020-07-25 21:11:56.003 DEBUG 14668 --- [           main] o.s.jdbc.datasource.DataSourceUtils      : Fetching JDBC Connection from DataSource
    2020-07-25 21:11:56.004  INFO 14668 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
    2020-07-25 21:11:56.652  INFO 14668 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
    2020-07-25 21:11:56.655 DEBUG 14668 --- [           main] o.s.jdbc.datasource.init.ScriptUtils     : Executing SQL script from URL [file:/C:/Users/donat/Downloads/spring-boot-transaction/target/classes/schema-mysql.sql]
    2020-07-25 21:11:56.725 DEBUG 14668 --- [           main] o.s.jdbc.datasource.init.ScriptUtils     : 0 returned as update count for SQL: DROP TABLE if EXISTS employee
    2020-07-25 21:11:56.746 DEBUG 14668 --- [           main] o.s.jdbc.datasource.init.ScriptUtils     : 0 returned as update count for SQL: DROP TABLE if EXISTS employeeHealthInsurance
    2020-07-25 21:11:56.777 DEBUG 14668 --- [           main] o.s.jdbc.datasource.init.ScriptUtils     : 0 returned as update count for SQL: CREATE TABLE employee( empId varchar(10) not null, empName varchar(100) not null )
    2020-07-25 21:11:56.817 DEBUG 14668 --- [           main] o.s.jdbc.datasource.init.ScriptUtils     : 0 returned as update count for SQL: CREATE TABLE employeeHealthInsurance( empId varchar(10) not null, healthInsuranceSchemeName varchar(100) not null, coverageAmount varchar(100) not null )
    2020-07-25 21:11:56.818 DEBUG 14668 --- [           main] o.s.jdbc.datasource.init.ScriptUtils     : Executed SQL script from URL [file:/C:/Users/donat/Downloads/spring-boot-transaction/target/classes/schema-mysql.sql] in 163 ms.
    2020-07-25 21:11:56.839 DEBUG 14668 --- [           main] o.s.aop.framework.CglibAopProxy          : Final method [protected final java.sql.Connection org.springframework.jdbc.core.support.JdbcDaoSupport.getConnection() throws org.springframework.jdbc.CannotGetJdbcConnectionException] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
    2020-07-25 21:11:56.839 DEBUG 14668 --- [           main] o.s.aop.framework.CglibAopProxy          : Final method [public final javax.sql.DataSource org.springframework.jdbc.core.support.JdbcDaoSupport.getDataSource()] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
    2020-07-25 21:11:56.839 DEBUG 14668 --- [           main] o.s.aop.framework.CglibAopProxy          : Final method [protected final void org.springframework.jdbc.core.support.JdbcDaoSupport.releaseConnection(java.sql.Connection)] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
    2020-07-25 21:11:56.839 DEBUG 14668 --- [           main] o.s.aop.framework.CglibAopProxy          : Final method [public final void org.springframework.jdbc.core.support.JdbcDaoSupport.setDataSource(javax.sql.DataSource)] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
    2020-07-25 21:11:56.839 DEBUG 14668 --- [           main] o.s.aop.framework.CglibAopProxy          : Final method [protected final org.springframework.jdbc.support.SQLExceptionTranslator org.springframework.jdbc.core.support.JdbcDaoSupport.getExceptionTranslator()] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
    2020-07-25 21:11:56.839 DEBUG 14668 --- [           main] o.s.aop.framework.CglibAopProxy          : Final method [public final org.springframework.jdbc.core.JdbcTemplate org.springframework.jdbc.core.support.JdbcDaoSupport.getJdbcTemplate()] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
    2020-07-25 21:11:56.839 DEBUG 14668 --- [           main] o.s.aop.framework.CglibAopProxy          : Final method [public final void org.springframework.jdbc.core.support.JdbcDaoSupport.setJdbcTemplate(org.springframework.jdbc.core.JdbcTemplate)] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
    2020-07-25 21:11:56.839  INFO 14668 --- [           main] o.s.aop.framework.CglibAopProxy          : Unable to proxy interface-implementing method [public final void org.springframework.dao.support.DaoSupport.afterPropertiesSet() throws java.lang.IllegalArgumentException,org.springframework.beans.factory.BeanInitializationException] because it is marked as final: Consider using interface-based JDK proxies instead!
    2020-07-25 21:11:56.840 DEBUG 14668 --- [           main] o.s.aop.framework.CglibAopProxy          : Final method [public final void org.springframework.dao.support.DaoSupport.afterPropertiesSet() throws java.lang.IllegalArgumentException,org.springframework.beans.factory.BeanInitializationException] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
    2020-07-25 21:11:56.856 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'healthInsuranceImpl'
    2020-07-25 21:11:56.859 DEBUG 14668 --- [           main] o.s.aop.framework.CglibAopProxy          : Final method [protected final java.sql.Connection org.springframework.jdbc.core.support.JdbcDaoSupport.getConnection() throws org.springframework.jdbc.CannotGetJdbcConnectionException] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
    2020-07-25 21:11:56.859 DEBUG 14668 --- [           main] o.s.aop.framework.CglibAopProxy          : Final method [public final javax.sql.DataSource org.springframework.jdbc.core.support.JdbcDaoSupport.getDataSource()] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
    2020-07-25 21:11:56.859 DEBUG 14668 --- [           main] o.s.aop.framework.CglibAopProxy          : Final method [protected final void org.springframework.jdbc.core.support.JdbcDaoSupport.releaseConnection(java.sql.Connection)] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
    2020-07-25 21:11:56.859 DEBUG 14668 --- [           main] o.s.aop.framework.CglibAopProxy          : Final method [public final void org.springframework.jdbc.core.support.JdbcDaoSupport.setDataSource(javax.sql.DataSource)] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
    2020-07-25 21:11:56.859 DEBUG 14668 --- [           main] o.s.aop.framework.CglibAopProxy          : Final method [protected final org.springframework.jdbc.support.SQLExceptionTranslator org.springframework.jdbc.core.support.JdbcDaoSupport.getExceptionTranslator()] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
    2020-07-25 21:11:56.860 DEBUG 14668 --- [           main] o.s.aop.framework.CglibAopProxy          : Final method [public final org.springframework.jdbc.core.JdbcTemplate org.springframework.jdbc.core.support.JdbcDaoSupport.getJdbcTemplate()] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
    2020-07-25 21:11:56.860 DEBUG 14668 --- [           main] o.s.aop.framework.CglibAopProxy          : Final method [public final void org.springframework.jdbc.core.support.JdbcDaoSupport.setJdbcTemplate(org.springframework.jdbc.core.JdbcTemplate)] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
    2020-07-25 21:11:56.860  INFO 14668 --- [           main] o.s.aop.framework.CglibAopProxy          : Unable to proxy interface-implementing method [public final void org.springframework.dao.support.DaoSupport.afterPropertiesSet() throws java.lang.IllegalArgumentException,org.springframework.beans.factory.BeanInitializationException] because it is marked as final: Consider using interface-based JDK proxies instead!
    2020-07-25 21:11:56.860 DEBUG 14668 --- [           main] o.s.aop.framework.CglibAopProxy          : Final method [public final void org.springframework.dao.support.DaoSupport.afterPropertiesSet() throws java.lang.IllegalArgumentException,org.springframework.beans.factory.BeanInitializationException] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
    2020-07-25 21:11:56.867 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'employeeServiceImpl'
    2020-07-25 21:11:56.869 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'healthInsuranceServiceImpl'
    2020-07-25 21:11:56.871 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'organizationServiceImpl'
    2020-07-25 21:11:56.872 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.AutoConfigurationPackages'
    2020-07-25 21:11:56.873 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration'
    2020-07-25 21:11:56.874 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$ClassProxyingConfiguration'
    2020-07-25 21:11:56.875 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Autowiring by type from bean name 'org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$ClassProxyingConfiguration' via constructor to bean named 'org.springframework.beans.factory.support.DefaultListableBeanFactory@12591ac8'
    2020-07-25 21:11:56.877 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.aop.AopAutoConfiguration'
    2020-07-25 21:11:56.878 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration'
    2020-07-25 21:11:56.878 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'applicationAvailability'
    2020-07-25 21:11:56.880 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration$Hikari'
    2020-07-25 21:11:56.880 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Autowiring by type from bean name 'org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration$Hikari' via constructor to bean named 'dataSource'
    2020-07-25 21:11:56.883 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration'
    2020-07-25 21:11:56.884 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration$PooledDataSourceConfiguration'
    2020-07-25 21:11:56.884 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration$HikariPoolDataSourceMetadataProviderConfiguration'
    2020-07-25 21:11:56.885 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'hikariPoolDataSourceMetadataProvider'
    2020-07-25 21:11:56.888 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration'
    2020-07-25 21:11:56.889 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializationConfiguration'
    2020-07-25 21:11:56.890 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration'
    2020-07-25 21:11:56.901 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.context.properties.ConfigurationBeanFactoryMetadata'
    2020-07-25 21:11:56.902 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration'
    2020-07-25 21:11:56.903 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration'
    2020-07-25 21:11:56.904 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'lifecycleProcessor'
    2020-07-25 21:11:56.905 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'spring.lifecycle-org.springframework.boot.autoconfigure.context.LifecycleProperties'
    2020-07-25 21:11:56.906 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Autowiring by type from bean name 'lifecycleProcessor' via factory method to bean named 'spring.lifecycle-org.springframework.boot.autoconfigure.context.LifecycleProperties'
    2020-07-25 21:11:56.908 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration'
    2020-07-25 21:11:56.909 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration'
    2020-07-25 21:11:56.912 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties'
    2020-07-25 21:11:56.914 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Autowiring by type from bean name 'org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration' via constructor to bean named 'spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties'
    2020-07-25 21:11:56.915 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.JdbcTemplateConfiguration'
    2020-07-25 21:11:56.916 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'jdbcTemplate'
    2020-07-25 21:11:56.916 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'spring.jdbc-org.springframework.boot.autoconfigure.jdbc.JdbcProperties'
    2020-07-25 21:11:56.917 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Autowiring by type from bean name 'jdbcTemplate' via factory method to bean named 'dataSource'
    2020-07-25 21:11:56.917 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Autowiring by type from bean name 'jdbcTemplate' via factory method to bean named 'spring.jdbc-org.springframework.boot.autoconfigure.jdbc.JdbcProperties'
    2020-07-25 21:11:56.929 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.NamedParameterJdbcTemplateConfiguration'
    2020-07-25 21:11:56.930 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'namedParameterJdbcTemplate'
    2020-07-25 21:11:56.931 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Autowiring by type from bean name 'namedParameterJdbcTemplate' via factory method to bean named 'jdbcTemplate'
    2020-07-25 21:11:56.936 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration'
    2020-07-25 21:11:56.937 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration'
    2020-07-25 21:11:56.938 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'taskExecutorBuilder'
    2020-07-25 21:11:56.939 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties'
    2020-07-25 21:11:56.941 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Autowiring by type from bean name 'taskExecutorBuilder' via factory method to bean named 'spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties'
    2020-07-25 21:11:56.946 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration'
    2020-07-25 21:11:56.948 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'taskSchedulerBuilder'
    2020-07-25 21:11:56.949 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties'
    2020-07-25 21:11:56.950 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Autowiring by type from bean name 'taskSchedulerBuilder' via factory method to bean named 'spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties'
    2020-07-25 21:11:56.951 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration$DataSourceTransactionManagerConfiguration'
    2020-07-25 21:11:56.952 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'transactionManager'
    2020-07-25 21:11:56.952 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Autowiring by type from bean name 'transactionManager' via factory method to bean named 'dataSource'
    2020-07-25 21:11:56.956 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'platformTransactionManagerCustomizers'
    2020-07-25 21:11:56.956 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration'
    2020-07-25 21:11:56.960 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'spring.transaction-org.springframework.boot.autoconfigure.transaction.TransactionProperties'
    2020-07-25 21:11:56.968 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration'
    2020-07-25 21:11:56.969 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$EnableTransactionManagementConfiguration$CglibAutoProxyConfiguration'
    2020-07-25 21:11:56.970 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$EnableTransactionManagementConfiguration'
    2020-07-25 21:11:56.970 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$TransactionTemplateConfiguration'
    2020-07-25 21:11:56.971 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'transactionTemplate'
    2020-07-25 21:11:56.971 DEBUG 14668 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Autowiring by type from bean name 'transactionTemplate' via factory method to bean named 'transactionManager'
    2020-07-25 21:11:57.005 DEBUG 14668 --- [           main] ConditionEvaluationReportLoggingListener : 


    ============================
    CONDITIONS EVALUATION REPORT
    ============================


    Positive matches:
    -----------------

       AopAutoConfiguration matched:
          - @ConditionalOnProperty (spring.aop.auto=true) matched (OnPropertyCondition)

       AopAutoConfiguration.ClassProxyingConfiguration matched:
          - @ConditionalOnMissingClass did not find unwanted class 'org.aspectj.weaver.Advice' (OnClassCondition)
          - @ConditionalOnProperty (spring.aop.proxy-target-class=true) matched (OnPropertyCondition)

       DataSourceAutoConfiguration matched:
          - @ConditionalOnClass found required classes 'javax.sql.DataSource', 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType' (OnClassCondition)
          - @ConditionalOnMissingBean (types: io.r2dbc.spi.ConnectionFactory; SearchStrategy: all) did not find any beans (OnBeanCondition)

       DataSourceAutoConfiguration.PooledDataSourceConfiguration matched:
          - AnyNestedCondition 1 matched 1 did not; NestedCondition on DataSourceAutoConfiguration.PooledDataSourceCondition.PooledDataSourceAvailable PooledDataSource found supported DataSource; NestedCondition on DataSourceAutoConfiguration.PooledDataSourceCondition.ExplicitType @ConditionalOnProperty (spring.datasource.type) did not find property 'type' (DataSourceAutoConfiguration.PooledDataSourceCondition)
          - @ConditionalOnMissingBean (types: javax.sql.DataSource,javax.sql.XADataSource; SearchStrategy: all) did not find any beans (OnBeanCondition)

       DataSourceConfiguration.Hikari matched:
          - @ConditionalOnClass found required class 'com.zaxxer.hikari.HikariDataSource' (OnClassCondition)
          - @ConditionalOnProperty (spring.datasource.type=com.zaxxer.hikari.HikariDataSource) matched (OnPropertyCondition)
          - @ConditionalOnMissingBean (types: javax.sql.DataSource; SearchStrategy: all) did not find any beans (OnBeanCondition)

       DataSourceJmxConfiguration matched:
          - @ConditionalOnProperty (spring.jmx.enabled=true) matched (OnPropertyCondition)

       DataSourceJmxConfiguration.Hikari matched:
          - @ConditionalOnClass found required class 'com.zaxxer.hikari.HikariDataSource' (OnClassCondition)
          - @ConditionalOnSingleCandidate (types: javax.sql.DataSource; SearchStrategy: all) found a primary bean from beans 'dataSource' (OnBeanCondition)

       DataSourcePoolMetadataProvidersConfiguration.HikariPoolDataSourceMetadataProviderConfiguration matched:
          - @ConditionalOnClass found required class 'com.zaxxer.hikari.HikariDataSource' (OnClassCondition)

       DataSourceTransactionManagerAutoConfiguration matched:
          - @ConditionalOnClass found required classes 'org.springframework.jdbc.core.JdbcTemplate', 'org.springframework.transaction.PlatformTransactionManager' (OnClassCondition)

       DataSourceTransactionManagerAutoConfiguration.DataSourceTransactionManagerConfiguration matched:
          - @ConditionalOnSingleCandidate (types: javax.sql.DataSource; SearchStrategy: all) found a primary bean from beans 'dataSource' (OnBeanCondition)

       DataSourceTransactionManagerAutoConfiguration.DataSourceTransactionManagerConfiguration#transactionManager matched:
          - @ConditionalOnMissingBean (types: org.springframework.transaction.PlatformTransactionManager; SearchStrategy: all) did not find any beans (OnBeanCondition)

       GenericCacheConfiguration matched:
          - Cache org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration automatic cache type (CacheCondition)

       JdbcTemplateAutoConfiguration matched:
          - @ConditionalOnClass found required classes 'javax.sql.DataSource', 'org.springframework.jdbc.core.JdbcTemplate' (OnClassCondition)
          - @ConditionalOnSingleCandidate (types: javax.sql.DataSource; SearchStrategy: all) found a primary bean from beans 'dataSource' (OnBeanCondition)

       JdbcTemplateConfiguration matched:
          - @ConditionalOnMissingBean (types: org.springframework.jdbc.core.JdbcOperations; SearchStrategy: all) did not find any beans (OnBeanCondition)

       LifecycleAutoConfiguration#defaultLifecycleProcessor matched:
          - @ConditionalOnMissingBean (names: lifecycleProcessor; SearchStrategy: current) did not find any beans (OnBeanCondition)

       NamedParameterJdbcTemplateConfiguration matched:
          - @ConditionalOnSingleCandidate (types: org.springframework.jdbc.core.JdbcTemplate; SearchStrategy: all) found a primary bean from beans 'jdbcTemplate'; @ConditionalOnMissingBean (types: org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations; SearchStrategy: all) did not find any beans (OnBeanCondition)

       NoOpCacheConfiguration matched:
          - Cache org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration automatic cache type (CacheCondition)

       PersistenceExceptionTranslationAutoConfiguration matched:
          - @ConditionalOnClass found required class 'org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor' (OnClassCondition)

       PersistenceExceptionTranslationAutoConfiguration#persistenceExceptionTranslationPostProcessor matched:
          - @ConditionalOnProperty (spring.dao.exceptiontranslation.enabled) matched (OnPropertyCondition)
          - @ConditionalOnMissingBean (types: org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor; SearchStrategy: all) did not find any beans (OnBeanCondition)

       PropertyPlaceholderAutoConfiguration#propertySourcesPlaceholderConfigurer matched:
          - @ConditionalOnMissingBean (types: org.springframework.context.support.PropertySourcesPlaceholderConfigurer; SearchStrategy: current) did not find any beans (OnBeanCondition)

       SimpleCacheConfiguration matched:
          - Cache org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration automatic cache type (CacheCondition)

       TaskExecutionAutoConfiguration matched:
          - @ConditionalOnClass found required class 'org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor' (OnClassCondition)

       TaskExecutionAutoConfiguration#applicationTaskExecutor matched:
          - @ConditionalOnMissingBean (types: java.util.concurrent.Executor; SearchStrategy: all) did not find any beans (OnBeanCondition)

       TaskExecutionAutoConfiguration#taskExecutorBuilder matched:
          - @ConditionalOnMissingBean (types: org.springframework.boot.task.TaskExecutorBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)

       TaskSchedulingAutoConfiguration matched:
          - @ConditionalOnClass found required class 'org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler' (OnClassCondition)

       TaskSchedulingAutoConfiguration#taskSchedulerBuilder matched:
          - @ConditionalOnMissingBean (types: org.springframework.boot.task.TaskSchedulerBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)

       TransactionAutoConfiguration matched:
          - @ConditionalOnClass found required class 'org.springframework.transaction.PlatformTransactionManager' (OnClassCondition)

       TransactionAutoConfiguration#platformTransactionManagerCustomizers matched:
          - @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers; SearchStrategy: all) did not find any beans (OnBeanCondition)

       TransactionAutoConfiguration.EnableTransactionManagementConfiguration matched:
          - @ConditionalOnBean (types: org.springframework.transaction.TransactionManager; SearchStrategy: all) found bean 'transactionManager'; @ConditionalOnMissingBean (types: org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration; SearchStrategy: all) did not find any beans (OnBeanCondition)

       TransactionAutoConfiguration.EnableTransactionManagementConfiguration.CglibAutoProxyConfiguration matched:
          - @ConditionalOnProperty (spring.aop.proxy-target-class=true) matched (OnPropertyCondition)

       TransactionAutoConfiguration.TransactionTemplateConfiguration matched:
          - @ConditionalOnSingleCandidate (types: org.springframework.transaction.PlatformTransactionManager; SearchStrategy: all) found a primary bean from beans 'transactionManager' (OnBeanCondition)

       TransactionAutoConfiguration.TransactionTemplateConfiguration#transactionTemplate matched:
          - @ConditionalOnMissingBean (types: org.springframework.transaction.support.TransactionOperations; SearchStrategy: all) did not find any beans (OnBeanCondition)


    Negative matches:
    -----------------

       ActiveMQAutoConfiguration:
          Did not match:
             - @ConditionalOnClass did not find required class 'javax.jms.ConnectionFactory' (OnClassCondition)

       AopAutoConfiguration.AspectJAutoProxyingConfiguration:
          Did not match:
             - @ConditionalOnClass did not find required class 'org.aspectj.weaver.Advice' (OnClassCondition)

       ArtemisAutoConfiguration:
          Did not match:
             - @ConditionalOnClass did not find required class 'javax.jms.ConnectionFactory' (OnClassCondition)

       BatchAutoConfiguration:
          Did not match:
             - @ConditionalOnClass did not find required class 'org.springframework.batch.core.launch.JobLauncher' (OnClassCondition)

       CacheAutoConfiguration:
          Did not match:
             - @ConditionalOnBean (types: org.springframework.cache.interceptor.CacheAspectSupport; SearchStrategy: all) did not find any beans of type org.springframework.cache.interceptor.CacheAspectSupport (OnBeanCondition)
          Matched:
             - @ConditionalOnClass found required class 'org.springframework.cache.CacheManager' (OnClassCondition)

       CacheAutoConfiguration.CacheManagerEntityManagerFactoryDependsOnPostProcessor:
          Did not match:
             - @ConditionalOnClass did not find required class 'org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean' (OnClassCondition)
             - Ancestor org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration did not match (ConditionEvaluationReport.AncestorsMatchedCondition)

       CaffeineCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.github.benmanes.caffeine.cache.Caffeine' (OnClassCondition)

   CassandraAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession' (OnClassCondition)

   CassandraDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession' (OnClassCondition)

   CassandraReactiveDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession' (OnClassCondition)

   CassandraReactiveRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.cassandra.ReactiveSession' (OnClassCondition)

   CassandraRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession' (OnClassCondition)

   ClientHttpConnectorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient' (OnClassCondition)

   CodecsAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.http.codec.CodecConfigurer' (OnClassCondition)

   CouchbaseAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster' (OnClassCondition)

   CouchbaseCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster' (OnClassCondition)

   CouchbaseDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket' (OnClassCondition)

   CouchbaseReactiveDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster' (OnClassCondition)

   CouchbaseReactiveRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster' (OnClassCondition)

   CouchbaseRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket' (OnClassCondition)

   DataSourceAutoConfiguration.EmbeddedDatabaseConfiguration:
      Did not match:
         - EmbeddedDataSource spring.datasource.url is set (DataSourceAutoConfiguration.EmbeddedDatabaseCondition)

   DataSourceConfiguration.Dbcp2:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.apache.commons.dbcp2.BasicDataSource' (OnClassCondition)

   DataSourceConfiguration.Generic:
      Did not match:
         - @ConditionalOnProperty (spring.datasource.type) did not find property 'spring.datasource.type' (OnPropertyCondition)

   DataSourceConfiguration.Tomcat:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.apache.tomcat.jdbc.pool.DataSource' (OnClassCondition)

   DataSourceJmxConfiguration.TomcatDataSourceJmxConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.apache.tomcat.jdbc.pool.DataSourceProxy' (OnClassCondition)

   DataSourcePoolMetadataProvidersConfiguration.CommonsDbcp2PoolDataSourceMetadataProviderConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.apache.commons.dbcp2.BasicDataSource' (OnClassCondition)

   DataSourcePoolMetadataProvidersConfiguration.TomcatDataSourcePoolMetadataProviderConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.apache.tomcat.jdbc.pool.DataSource' (OnClassCondition)

   DispatcherServletAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.servlet.DispatcherServlet' (OnClassCondition)

   EhCacheCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'net.sf.ehcache.Cache' (OnClassCondition)

   ElasticsearchDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.elasticsearch.core.ElasticsearchTemplate' (OnClassCondition)

   ElasticsearchRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.elasticsearch.client.Client' (OnClassCondition)

   ElasticsearchRestClientAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.elasticsearch.client.RestClient' (OnClassCondition)

   EmbeddedLdapAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.unboundid.ldap.listener.InMemoryDirectoryServer' (OnClassCondition)

   EmbeddedMongoAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.MongoClientSettings' (OnClassCondition)

   EmbeddedWebServerFactoryCustomizerAutoConfiguration:
      Did not match:
         - @ConditionalOnWebApplication did not find reactive or servlet web application classes (OnWebApplicationCondition)

   ErrorMvcAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.servlet.Servlet' (OnClassCondition)

   ErrorWebFluxAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.config.WebFluxConfigurer' (OnClassCondition)

   FlywayAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.flywaydb.core.Flyway' (OnClassCondition)

   FreeMarkerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'freemarker.template.Configuration' (OnClassCondition)

   GroovyTemplateAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'groovy.text.markup.MarkupTemplateEngine' (OnClassCondition)

   GsonAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.google.gson.Gson' (OnClassCondition)

   H2ConsoleAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.h2.server.web.WebServlet' (OnClassCondition)

   HazelcastAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance' (OnClassCondition)

   HazelcastCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance' (OnClassCondition)

   HazelcastJpaDependencyAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance' (OnClassCondition)

   HibernateJpaAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.persistence.EntityManager' (OnClassCondition)

   HttpEncodingAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.filter.CharacterEncodingFilter' (OnClassCondition)

   HttpHandlerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.http.server.reactive.HttpHandler' (OnClassCondition)

   HttpMessageConvertersAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.http.converter.HttpMessageConverter' (OnClassCondition)

   HypermediaAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.hateoas.EntityModel' (OnClassCondition)

   InfinispanCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.infinispan.spring.embedded.provider.SpringEmbeddedCacheManager' (OnClassCondition)

   InfluxDbAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.influxdb.InfluxDB' (OnClassCondition)

   IntegrationAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.integration.config.EnableIntegration' (OnClassCondition)

   JCacheCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.cache.Caching' (OnClassCondition)

   JacksonAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.fasterxml.jackson.databind.ObjectMapper' (OnClassCondition)

   JdbcRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.jdbc.repository.config.AbstractJdbcConfiguration' (OnClassCondition)

   JerseyAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.servlet.ServletRegistration' (OnClassCondition)

   JmsAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.jms.Message' (OnClassCondition)

   JmxAutoConfiguration:
      Did not match:
         - @ConditionalOnProperty (spring.jmx.enabled=true) did not find property 'enabled' (OnPropertyCondition)
      Matched:
         - @ConditionalOnClass found required class 'org.springframework.jmx.export.MBeanExporter' (OnClassCondition)

   JndiConnectionFactoryAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.jms.core.JmsTemplate' (OnClassCondition)

   JndiDataSourceAutoConfiguration:
      Did not match:
         - @ConditionalOnProperty (spring.datasource.jndi-name) did not find property 'jndi-name' (OnPropertyCondition)
      Matched:
         - @ConditionalOnClass found required classes 'javax.sql.DataSource', 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType' (OnClassCondition)

   JooqAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.jooq.DSLContext' (OnClassCondition)

   JpaRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.jpa.repository.JpaRepository' (OnClassCondition)

   JsonbAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.json.bind.Jsonb' (OnClassCondition)

   JtaAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.transaction.Transaction' (OnClassCondition)

   KafkaAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.kafka.core.KafkaTemplate' (OnClassCondition)

   LdapAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.ldap.core.ContextSource' (OnClassCondition)

   LdapRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.ldap.repository.LdapRepository' (OnClassCondition)

   LiquibaseAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'liquibase.change.DatabaseChange' (OnClassCondition)

   MailSenderAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.activation.MimeType' (OnClassCondition)

   MailSenderValidatorAutoConfiguration:
      Did not match:
         - @ConditionalOnSingleCandidate did not find required type 'org.springframework.mail.javamail.JavaMailSenderImpl' (OnBeanCondition)

   MessageSourceAutoConfiguration:
      Did not match:
         - ResourceBundle did not find bundle with basename messages (MessageSourceAutoConfiguration.ResourceBundleCondition)

   MongoAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.client.MongoClient' (OnClassCondition)

   MongoDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.client.MongoClient' (OnClassCondition)

   MongoReactiveAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient' (OnClassCondition)

   MongoReactiveDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient' (OnClassCondition)

   MongoReactiveRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient' (OnClassCondition)

   MongoRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.client.MongoClient' (OnClassCondition)

   MultipartAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.servlet.MultipartConfigElement' (OnClassCondition)

   MustacheAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.samskivert.mustache.Mustache' (OnClassCondition)

   Neo4jDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.neo4j.ogm.session.SessionFactory' (OnClassCondition)

   Neo4jRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.neo4j.ogm.session.Neo4jSession' (OnClassCondition)

   OAuth2ClientAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.configuration.EnableWebSecurity' (OnClassCondition)

   OAuth2ResourceServerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken' (OnClassCondition)

   ProjectInfoAutoConfiguration#buildProperties:
      Did not match:
         - @ConditionalOnResource did not find resource '${spring.info.build.location:classpath:META-INF/build-info.properties}' (OnResourceCondition)

   ProjectInfoAutoConfiguration#gitProperties:
      Did not match:
         - GitResource did not find git info at classpath:git.properties (ProjectInfoAutoConfiguration.GitResourceAvailableCondition)

   QuartzAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.quartz.Scheduler' (OnClassCondition)

   R2dbcAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.r2dbc.spi.ConnectionFactory' (OnClassCondition)

   R2dbcDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.r2dbc.core.DatabaseClient' (OnClassCondition)

   R2dbcRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.r2dbc.spi.ConnectionFactory' (OnClassCondition)

   R2dbcTransactionManagerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.r2dbc.connectionfactory.R2dbcTransactionManager' (OnClassCondition)

   RSocketMessagingAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.rsocket.RSocketFactory' (OnClassCondition)

   RSocketRequesterAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.rsocket.RSocketFactory' (OnClassCondition)

   RSocketSecurityAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor' (OnClassCondition)

   RSocketServerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.rsocket.core.RSocketServer' (OnClassCondition)

   RSocketStrategiesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.netty.buffer.PooledByteBufAllocator' (OnClassCondition)

   RabbitAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.rabbitmq.client.Channel' (OnClassCondition)

   ReactiveElasticsearchRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.elasticsearch.client.reactive.ReactiveElasticsearchClient' (OnClassCondition)

   ReactiveElasticsearchRestClientAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.netty.http.client.HttpClient' (OnClassCondition)

   ReactiveOAuth2ClientAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)

   ReactiveOAuth2ResourceServerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity' (OnClassCondition)

   ReactiveSecurityAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)

   ReactiveUserDetailsServiceAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.authentication.ReactiveAuthenticationManager' (OnClassCondition)

   ReactiveWebServerFactoryAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.http.ReactiveHttpInputMessage' (OnClassCondition)

   RedisAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.redis.core.RedisOperations' (OnClassCondition)

   RedisCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.redis.connection.RedisConnectionFactory' (OnClassCondition)

   RedisReactiveAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)

   RedisRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.redis.repository.configuration.EnableRedisRepositories' (OnClassCondition)

   RepositoryRestMvcAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration' (OnClassCondition)

   RestTemplateAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.client.RestTemplate' (OnClassCondition)

   Saml2RelyingPartyAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository' (OnClassCondition)

   SecurityAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.authentication.DefaultAuthenticationEventPublisher' (OnClassCondition)

   SecurityFilterAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.config.http.SessionCreationPolicy' (OnClassCondition)

   SendGridAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.sendgrid.SendGrid' (OnClassCondition)

   ServletWebServerFactoryAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.servlet.ServletRequest' (OnClassCondition)

   SessionAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.session.Session' (OnClassCondition)

   SolrAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.apache.solr.client.solrj.impl.CloudSolrClient' (OnClassCondition)

   SolrRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.apache.solr.client.solrj.SolrClient' (OnClassCondition)

   SpringApplicationAdminJmxAutoConfiguration:
      Did not match:
         - @ConditionalOnProperty (spring.application.admin.enabled=true) did not find property 'enabled' (OnPropertyCondition)

   SpringDataWebAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.web.PageableHandlerMethodArgumentResolver' (OnClassCondition)

   TaskSchedulingAutoConfiguration#taskScheduler:
      Did not match:
         - @ConditionalOnBean (names: org.springframework.context.annotation.internalScheduledAnnotationProcessor; SearchStrategy: all) did not find any beans named org.springframework.context.annotation.internalScheduledAnnotationProcessor (OnBeanCondition)

   ThymeleafAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.thymeleaf.spring5.SpringTemplateEngine' (OnClassCondition)

   TransactionAutoConfiguration#transactionalOperator:
      Did not match:
         - @ConditionalOnSingleCandidate (types: org.springframework.transaction.ReactiveTransactionManager; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TransactionAutoConfiguration.EnableTransactionManagementConfiguration.JdkDynamicAutoProxyConfiguration:
      Did not match:
         - @ConditionalOnProperty (spring.aop.proxy-target-class=false) did not find property 'proxy-target-class' (OnPropertyCondition)

   UserDetailsServiceAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.authentication.AuthenticationManager' (OnClassCondition)

   ValidationAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.validation.executable.ExecutableValidator' (OnClassCondition)

   WebClientAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient' (OnClassCondition)

   WebFluxAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.config.WebFluxConfigurer' (OnClassCondition)

   WebMvcAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.servlet.Servlet' (OnClassCondition)

   WebServiceTemplateAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.oxm.Marshaller' (OnClassCondition)

   WebServicesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.ws.transport.http.MessageDispatcherServlet' (OnClassCondition)

   WebSocketMessagingAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer' (OnClassCondition)

   WebSocketReactiveAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.servlet.Servlet' (OnClassCondition)

   WebSocketServletAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.servlet.Servlet' (OnClassCondition)

   XADataSourceAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.transaction.TransactionManager' (OnClassCondition)


    Exclusions:
    -----------

        None


    Unconditional classes:
    ----------------------

        org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration

        org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration

        org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration

        org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration

        org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration



    2020-07-25 21:11:57.009  INFO 14668 --- [           main] c.e.s.SpringBootTransactionApplication   : Started SpringBootTransactionApplication in 2.008 seconds (JVM running for 2.339)
    2020-07-25 21:11:57.026 DEBUG 14668 --- [           main] o.s.jdbc.core.JdbcTemplate               : Executing prepared SQL update
    2020-07-25 21:11:57.026 DEBUG 14668 --- [           main] o.s.jdbc.core.JdbcTemplate               : Executing prepared SQL statement [INSERT INTO employee (empId, empName) VALUES (?,?)]
    2020-07-25 21:11:57.026 DEBUG 14668 --- [           main] o.s.jdbc.datasource.DataSourceUtils      : Fetching JDBC Connection from DataSource
    2020-07-25 21:11:57.078 DEBUG 14668 --- [           main] o.s.jdbc.core.JdbcTemplate               : Executing prepared SQL update
    2020-07-25 21:11:57.078 DEBUG 14668 --- [           main] o.s.jdbc.core.JdbcTemplate               : Executing prepared SQL statement [INSERT INTO employeeHealthInsurance (empId, healthInsuranceSchemeName, coverageAmount) VALUES (?,?,?)]
    2020-07-25 21:11:57.078 DEBUG 14668 --- [           main] o.s.jdbc.datasource.DataSourceUtils      : Fetching JDBC Connection from DataSource
    2020-07-25 21:11:57.089 DEBUG 14668 --- [extShutdownHook] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@762ef0ea, started on Sat Jul 25 21:11:55 PST 2020
    2020-07-25 21:11:57.091  INFO 14668 --- [extShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
    2020-07-25 21:11:57.106  INFO 14668 --- [extShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.

    Process finished with exit code 0


    without logging.level.org.springframework=DEBUG

    "C:\Program Files\Java\jdk-13\bin\java.exe" "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2019.2.3\lib\idea_rt.jar=65264:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2019.2.3\bin" -Dfile.encoding=UTF-8 -classpath C:\Users\donat\Downloads\spring-boot-transaction\target\classes;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\2.3.2.RELEASE\spring-boot-starter-jdbc-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot-starter\2.3.2.RELEASE\spring-boot-starter-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot\2.3.2.RELEASE\spring-boot-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-context\5.2.8.RELEASE\spring-context-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-aop\5.2.8.RELEASE\spring-aop-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-expression\5.2.8.RELEASE\spring-expression-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\2.3.2.RELEASE\spring-boot-autoconfigure-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot-starter-logging\2.3.2.RELEASE\spring-boot-starter-logging-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\ch\qos\logback\logback-classic\1.2.3\logback-classic-1.2.3.jar;C:\Users\donat\.m2\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar;C:\Users\donat\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.13.3\log4j-to-slf4j-2.13.3.jar;C:\Users\donat\.m2\repository\org\apache\logging\log4j\log4j-api\2.13.3\log4j-api-2.13.3.jar;C:\Users\donat\.m2\repository\org\slf4j\jul-to-slf4j\1.7.30\jul-to-slf4j-1.7.30.jar;C:\Users\donat\.m2\repository\jakarta\annotation\jakarta.annotation-api\1.3.5\jakarta.annotation-api-1.3.5.jar;C:\Users\donat\.m2\repository\org\yaml\snakeyaml\1.26\snakeyaml-1.26.jar;C:\Users\donat\.m2\repository\com\zaxxer\HikariCP\3.4.5\HikariCP-3.4.5.jar;C:\Users\donat\.m2\repository\org\slf4j\slf4j-api\1.7.30\slf4j-api-1.7.30.jar;C:\Users\donat\.m2\repository\org\springframework\spring-jdbc\5.2.8.RELEASE\spring-jdbc-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-beans\5.2.8.RELEASE\spring-beans-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-tx\5.2.8.RELEASE\spring-tx-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\mysql\mysql-connector-java\8.0.21\mysql-connector-java-8.0.21.jar;C:\Users\donat\.m2\repository\org\springframework\spring-core\5.2.8.RELEASE\spring-core-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-jcl\5.2.8.RELEASE\spring-jcl-5.2.8.RELEASE.jar com.example.springboottransaction.SpringBootTransactionApplication

      .   ____          _            __ _ _
     /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      '  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::        (v2.3.2.RELEASE)

    2020-07-25 21:11:15.451  INFO 360 --- [           main] c.e.s.SpringBootTransactionApplication   : Starting SpringBootTransactionApplication on DESKTOP-ADOT1IA with PID 360 (C:\Users\donat\Downloads\spring-boot-transaction\target\classes started by donat in C:\Users\donat\Downloads\spring-boot-transaction)
    2020-07-25 21:11:15.454  INFO 360 --- [           main] c.e.s.SpringBootTransactionApplication   : No active profile set, falling back to default profiles: default
    2020-07-25 21:11:16.119  INFO 360 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
    2020-07-25 21:11:16.760  INFO 360 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
    2020-07-25 21:11:16.876  INFO 360 --- [           main] o.s.aop.framework.CglibAopProxy          : Unable to proxy interface-implementing method [public final void org.springframework.dao.support.DaoSupport.afterPropertiesSet() throws java.lang.IllegalArgumentException,org.springframework.beans.factory.BeanInitializationException] because it is marked as final: Consider using interface-based JDK proxies instead!
    2020-07-25 21:11:16.898  INFO 360 --- [           main] o.s.aop.framework.CglibAopProxy          : Unable to proxy interface-implementing method [public final void org.springframework.dao.support.DaoSupport.afterPropertiesSet() throws java.lang.IllegalArgumentException,org.springframework.beans.factory.BeanInitializationException] because it is marked as final: Consider using interface-based JDK proxies instead!
    2020-07-25 21:11:17.015  INFO 360 --- [           main] c.e.s.SpringBootTransactionApplication   : Started SpringBootTransactionApplication in 1.901 seconds (JVM running for 2.249)
    2020-07-25 21:11:17.091  INFO 360 --- [extShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
    2020-07-25 21:11:17.104  INFO 360 --- [extShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.

    Process finished with exit code 0

---------------------------------------------------------------------------

Create the schema-mysql.sql as follows. 
    This is the initialization script which is run at the beginning by Spring Boot JDBC-

    resources/schema-mysql.sql

    DROP TABLE if EXISTS employee;
    DROP TABLE if EXISTS employeeHealthInsurance;

    CREATE TABLE employee(
        empId varchar(10) not null,
        empName varchar(100) not null
    );

    CREATE TABLE employeeHealthInsurance(
        empId varchar(10) not null,
        healthInsuranceSchemeName varchar(100) not null,
        coverageAmount varchar(100) not null
    );

---------------------------------------------------------------------------

Define the Model class Employee which will represent the Employee details-

    public class Employee {
        private String empId;
        private String empName;

        public Employee() {
        }

        public Employee(String empId, String empName) {
            this.empId = empId;
            this.empName = empName;
        }

        public String getEmpId() {
            return empId;
        }

        public void setEmpId(String empId) {
            this.empId = empId;
        }

        public String getEmpName() {
            return empName;
        }

        public void setEmpName(String empName) {
            this.empName = empName;
        }

        @Override
        public String toString() {
            return "Employee{" +
                    "empId='" + empId + '\'' +
                    ", empName='" + empName + '\'' +
                    '}';
        }
    }

---------------------------------------------------------------------------

Create the EmployeeDAO interface for performing Employee operations as follows-

    public interface EmployeeDao {
        void insertEmployee(Employee employee);
        void deleteEmployeeById(String empId);
    }

---------------------------------------------------------------------------

Create the EmployeeDAOImpl which implements the EmployeeDAO interface as follows. 
    Spring Boot will detect spring-jdbc on the classpath and mysql 
    and will create a DataSource and a JdbcTemplate for us automatically. 

    Because such infrastructure is now available and we have no dedicated configuration, 
    a DataSourceTransactionManager will also be created for us.

    @Repository
    public class EmployeeDaoImpl extends JdbcDaoSupport implements EmployeeDao {
        @Autowired
        private DataSource dataSource;

        @PostConstruct
        private void initialize(){
            setDataSource(dataSource);
        }

        @Override
        public void insertEmployee(Employee employee) {
            String sql = "INSERT INTO employee "+"(empId, empName) VALUES (?,?)";
            getJdbcTemplate().update(sql,
                    employee.getEmpId(),
                    employee.getEmpName()
            );
        }

        @Override
        public void deleteEmployeeById(String empId) {
            String sql = "DELETE FROM employee WHERE empId = ?";
            getJdbcTemplate().update(sql, empId);
        }
    }

---------------------------------------------------------------------------

Define the Model class EmployeeHealthInsurance which will represent the Employee Health Insurance details-

    public class EmployeeHealthInsurance {
        private String empId;
        private String healthInsuranceScheme;
        private int coverageAmount;

        public EmployeeHealthInsurance() {
        }

        public EmployeeHealthInsurance(String empId, String healthInsuranceScheme, int coverageAmount) {
            this.empId = empId;
            this.healthInsuranceScheme = healthInsuranceScheme;
            this.coverageAmount = coverageAmount;
        }

        public String getEmpId() {
            return empId;
        }

        public void setEmpId(String empId) {
            this.empId = empId;
        }

        public String getHealthInsuranceScheme() {
            return healthInsuranceScheme;
        }

        public void setHealthInsuranceScheme(String healthInsuranceScheme) {
            this.healthInsuranceScheme = healthInsuranceScheme;
        }

        public int getCoverageAmount() {
            return coverageAmount;
        }

        public void setCoverageAmount(int coverageAmount) {
            this.coverageAmount = coverageAmount;
        }

        @Override
        public String toString() {
            return "EmployeeHealthInsurance{" +
                    "empId='" + empId + '\'' +
                    ", healthInsuranceScheme='" + healthInsuranceScheme + '\'' +
                    ", coverageAmount=" + coverageAmount +
                    '}';
        }
    }

---------------------------------------------------------------------------

Create the HealthInsuranceDao for performing health insurance operations as follows-

    public interface HealthInsuranceDao {
        void registerEmployeeHealthInsurance(EmployeeHealthInsurance employeeHealthInsurance);
        void deleteEmployeeHealthInsuranceById(String empId);
    }

---------------------------------------------------------------------------

Create the EmployeeHealthInsuranceDAOImpl which implements HealthInsuranceDao as follows-

    @Repository
    public class HealthInsuranceImpl extends JdbcDaoSupport implements HealthInsuranceDao {

        @Autowired
        private DataSource dataSource;

        @PostConstruct
        private void initialize(){
            setDataSource(dataSource);
        }

        @Override
        public void registerEmployeeHealthInsurance(EmployeeHealthInsurance employeeHealthInsurance) {
            String sql = "INSERT INTO employeeHealthInsurance "+"(empId, healthInsuranceSchemeName, coverageAmount) VALUES (?,?,?)";
            getJdbcTemplate().update(sql,
                    employeeHealthInsurance.getEmpId(),
                    employeeHealthInsurance.getHealthInsuranceScheme(),
                    employeeHealthInsurance.getCoverageAmount()
            );
        }

        @Override
        public void deleteEmployeeHealthInsuranceById(String empId) {
            String sql = "DELETE FROM employeeHealthInsurance WHERE empId = ?";
            getJdbcTemplate().update(sql, empId);
        }
    }

---------------------------------------------------------------------------

Create the EmployeeService interface for performing employee operations as follows-

    public interface EmployeeService {
        void insertEmployee(Employee employee);
        void deleteEmployeeById(String empId);
    }

---------------------------------------------------------------------------

Create the EmployeeServiceImpl which implements the EmployeeService as follows-

    @Service
    public class EmployeeServiceImpl implements EmployeeService {

        @Autowired
        private EmployeeDao employeeDao;

        @Override
        public void insertEmployee(Employee employee) {
            employeeDao.insertEmployee(employee);
        }

        @Override
        public void deleteEmployeeById(String empId) {
            employeeDao.deleteEmployeeById(empId);
        }
    }

---------------------------------------------------------------------------

Create the HealthInsuranceService interface as follows-

    public interface HealthInsuranceService {
        void registerEmployeeHealthInsurance(EmployeeHealthInsurance employeeHealthInsurance);
        void deleteEmployeeHealthInsuranceById(String empId);
    }

---------------------------------------------------------------------------

Create the HealthInsuranceServiceImpl which implements the HealthInsuranceService as follows-

    @Service
    public class HealthInsuranceServiceImpl implements HealthInsuranceService {

        @Autowired
        private HealthInsuranceDao healthInsuranceDao;

        @Override
        public void registerEmployeeHealthInsurance(EmployeeHealthInsurance employeeHealthInsurance) {
            healthInsuranceDao.registerEmployeeHealthInsurance(employeeHealthInsurance);
        }

        @Override
        public void deleteEmployeeHealthInsuranceById(String empId) {
            healthInsuranceDao.deleteEmployeeHealthInsuranceById(empId);
        }
    }

---------------------------------------------------------------------------

Create the OrganizationService interface as follows-

    public interface OrganizationService {
        void joinOrganization(Employee employee, EmployeeHealthInsurance employeeHealthInsurance);
        void leaveOrganization(Employee employee, EmployeeHealthInsurance employeeHealthInsurance);
    }

---------------------------------------------------------------------------

Create the OrganizationServiceImpl which implements the OrganizationService. 
    It makes use of the EmployeeService and the HealthInsuranceService.

    @Service
    public class OrganizationServiceImpl implements OrganizationService{

        @Autowired
        private EmployeeService employeeService;

        @Autowired
        private HealthInsuranceService healthInsuranceService;

        @Override
    //    @Transactional
        public void joinOrganization(Employee employee, EmployeeHealthInsurance employeeHealthInsurance) {
            employeeService.insertEmployee(employee);
    //        if (employee.getEmpId().equals("emp1")){
    //            throw new RuntimeException("throwing exception to test transaction rollback");
    //        } 
            healthInsuranceService.registerEmployeeHealthInsurance(employeeHealthInsurance);
        }

        @Override
    //    @Transactional
        public void leaveOrganization(Employee employee, EmployeeHealthInsurance employeeHealthInsurance) {
            employeeService.deleteEmployeeById(employee.getEmpId());
            healthInsuranceService.deleteEmployeeHealthInsuranceById(employeeHealthInsurance.getEmpId());
        }
    }

---------------------------------------------------------------------------

Finally create the Spring Boot Main class as follows-

    @SpringBootApplication
    public class SpringBootTransactionApplication {

        public static void main(String[] args) {

            ApplicationContext context = SpringApplication.run(SpringBootTransactionApplication.class, args);
            OrganizationService organizationService = context.getBean(OrganizationService.class);
            Employee employee = new Employee();
            employee.setEmpId("emp1");
            employee.setEmpName("emp1");

            EmployeeHealthInsurance employeeHealthInsurance = new EmployeeHealthInsurance();
            employeeHealthInsurance.setEmpId("emp1");
            employeeHealthInsurance.setHealthInsuranceScheme("premium");
            employeeHealthInsurance.setCoverageAmount(20000);

            organizationService.joinOrganization(employee,employeeHealthInsurance);
        }
    }

---------------------------------------------------------------------------

If we now run the application, record will be inserted in both the employee table and the employeehealthinsurance table

        before running:

        mysql> use bootdb;
        Database changed
        mysql> show tables;
        Empty set (0.00 sec)

        after running:

        mysql> show tables;
        +-------------------------+
        | Tables_in_bootdb        |
        +-------------------------+
        | employee                |
        | employeeHealthInsurance |
        +-------------------------+
        2 rows in set (0.00 sec)

        mysql> select * from employee;
        +-------+---------+
        | empId | empName |
        +-------+---------+
        | emp1  | emp1    |
        +-------+---------+
        1 row in set (0.00 sec)

        mysql> select * from employeeHealthInsurance;
        +-------+---------------------------+----------------+
        | empId | healthInsuranceSchemeName | coverageAmount |
        +-------+---------------------------+----------------+
        | emp1  | premium                   | 20000          |
        +-------+---------------------------+----------------+
        1 row in set (0.00 sec)

---------------------------------------------------------------------------

Suppose the employeeService call is successful but due to some reason the healthInsuranceService call fails. 
    What should happen in this case. In such a scenario the entry made 
    in the employee table for the new employee should also be reverted. 

    Let us see how our application will behave in such a scenario.
    We are manually throwing an unchecked exception after the first service call is made.

    comment out below on OrganizationServiceImpl

        if (employee.getEmpId().equals("emp1")) {
			throw new RuntimeException("thowing exception to test transaction rollback");
		}

    Lets now run the application.

    "C:\Program Files\Java\jdk-13\bin\java.exe" "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2019.2.3\lib\idea_rt.jar=55039:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2019.2.3\bin" -Dfile.encoding=UTF-8 -classpath C:\Users\donat\Downloads\spring-boot-transaction\target\classes;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\2.3.2.RELEASE\spring-boot-starter-jdbc-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot-starter\2.3.2.RELEASE\spring-boot-starter-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot\2.3.2.RELEASE\spring-boot-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-context\5.2.8.RELEASE\spring-context-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-aop\5.2.8.RELEASE\spring-aop-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-expression\5.2.8.RELEASE\spring-expression-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\2.3.2.RELEASE\spring-boot-autoconfigure-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot-starter-logging\2.3.2.RELEASE\spring-boot-starter-logging-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\ch\qos\logback\logback-classic\1.2.3\logback-classic-1.2.3.jar;C:\Users\donat\.m2\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar;C:\Users\donat\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.13.3\log4j-to-slf4j-2.13.3.jar;C:\Users\donat\.m2\repository\org\apache\logging\log4j\log4j-api\2.13.3\log4j-api-2.13.3.jar;C:\Users\donat\.m2\repository\org\slf4j\jul-to-slf4j\1.7.30\jul-to-slf4j-1.7.30.jar;C:\Users\donat\.m2\repository\jakarta\annotation\jakarta.annotation-api\1.3.5\jakarta.annotation-api-1.3.5.jar;C:\Users\donat\.m2\repository\org\yaml\snakeyaml\1.26\snakeyaml-1.26.jar;C:\Users\donat\.m2\repository\com\zaxxer\HikariCP\3.4.5\HikariCP-3.4.5.jar;C:\Users\donat\.m2\repository\org\slf4j\slf4j-api\1.7.30\slf4j-api-1.7.30.jar;C:\Users\donat\.m2\repository\org\springframework\spring-jdbc\5.2.8.RELEASE\spring-jdbc-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-beans\5.2.8.RELEASE\spring-beans-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-tx\5.2.8.RELEASE\spring-tx-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\mysql\mysql-connector-java\8.0.21\mysql-connector-java-8.0.21.jar;C:\Users\donat\.m2\repository\org\springframework\spring-core\5.2.8.RELEASE\spring-core-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-jcl\5.2.8.RELEASE\spring-jcl-5.2.8.RELEASE.jar com.example.springboottransaction.SpringBootTransactionApplication

    .   ____          _            __ _ _
    /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
    \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
    '  |____| .__|_| |_|_| |_\__, | / / / /
    =========|_|==============|___/=/_/_/_/
    :: Spring Boot ::        (v2.3.2.RELEASE)

    2020-07-25 22:04:41.029  INFO 18028 --- [           main] c.e.s.SpringBootTransactionApplication   : Starting SpringBootTransactionApplication on DESKTOP-ADOT1IA with PID 18028 (C:\Users\donat\Downloads\spring-boot-transaction\target\classes started by donat in C:\Users\donat\Downloads\spring-boot-transaction)
    2020-07-25 22:04:41.032  INFO 18028 --- [           main] c.e.s.SpringBootTransactionApplication   : No active profile set, falling back to default profiles: default
    2020-07-25 22:04:41.651  INFO 18028 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
    2020-07-25 22:04:42.293  INFO 18028 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
    2020-07-25 22:04:42.419  INFO 18028 --- [           main] o.s.aop.framework.CglibAopProxy          : Unable to proxy interface-implementing method [public final void org.springframework.dao.support.DaoSupport.afterPropertiesSet() throws java.lang.IllegalArgumentException,org.springframework.beans.factory.BeanInitializationException] because it is marked as final: Consider using interface-based JDK proxies instead!
    2020-07-25 22:04:42.437  INFO 18028 --- [           main] o.s.aop.framework.CglibAopProxy          : Unable to proxy interface-implementing method [public final void org.springframework.dao.support.DaoSupport.afterPropertiesSet() throws java.lang.IllegalArgumentException,org.springframework.beans.factory.BeanInitializationException] because it is marked as final: Consider using interface-based JDK proxies instead!
    2020-07-25 22:04:42.553  INFO 18028 --- [           main] c.e.s.SpringBootTransactionApplication   : Started SpringBootTransactionApplication in 1.85 seconds (JVM running for 2.175)
    Exception in thread "main" java.lang.RuntimeException: throwing exception to test transaction rollback
        at com.example.springboottransaction.service.OrganizationServiceImpl.joinOrganization(OrganizationServiceImpl.java:23)
        at com.example.springboottransaction.SpringBootTransactionApplication.main(SpringBootTransactionApplication.java:27)
    2020-07-25 22:04:42.604  INFO 18028 --- [extShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
    2020-07-25 22:04:42.618  INFO 18028 --- [extShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.

    Process finished with exit code 1



    We can see that there is record in employee table but not in employeehealthinsurance table.

    mysql> select * from employee;
    +-------+---------+
    | empId | empName |
    +-------+---------+
    | emp1  | emp1    |
    +-------+---------+
    1 row in set (0.00 sec)

    mysql> select * from employeeHealthInsurance;
    Empty set (0.00 sec)

---------------------------------------------------------------------------

Now let us implement transaction management. We will be using the Transactional annotation. 
    Transaction is a cross cutting concern and it is implemented using AOP in Spring Boot.

    comment out @Transactional on OrganizationServiceImpl

    Spring Boot implicitly creates a proxy for the transaction annotated methods. 

    So for such methods the proxy acts like a wrapper which takes 
    care of creating a transaction at the beginning of the method 
    call and committing the transaction after the method is executed

    The component that intercepts the @Transactional annotated method like the EmployeeService. 
    Now let us run the application again.

    "C:\Program Files\Java\jdk-13\bin\java.exe" "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2019.2.3\lib\idea_rt.jar=55870:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2019.2.3\bin" -Dfile.encoding=UTF-8 -classpath C:\Users\donat\Downloads\spring-boot-transaction\target\classes;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\2.3.2.RELEASE\spring-boot-starter-jdbc-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot-starter\2.3.2.RELEASE\spring-boot-starter-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot\2.3.2.RELEASE\spring-boot-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-context\5.2.8.RELEASE\spring-context-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-aop\5.2.8.RELEASE\spring-aop-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-expression\5.2.8.RELEASE\spring-expression-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\2.3.2.RELEASE\spring-boot-autoconfigure-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot-starter-logging\2.3.2.RELEASE\spring-boot-starter-logging-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\ch\qos\logback\logback-classic\1.2.3\logback-classic-1.2.3.jar;C:\Users\donat\.m2\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar;C:\Users\donat\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.13.3\log4j-to-slf4j-2.13.3.jar;C:\Users\donat\.m2\repository\org\apache\logging\log4j\log4j-api\2.13.3\log4j-api-2.13.3.jar;C:\Users\donat\.m2\repository\org\slf4j\jul-to-slf4j\1.7.30\jul-to-slf4j-1.7.30.jar;C:\Users\donat\.m2\repository\jakarta\annotation\jakarta.annotation-api\1.3.5\jakarta.annotation-api-1.3.5.jar;C:\Users\donat\.m2\repository\org\yaml\snakeyaml\1.26\snakeyaml-1.26.jar;C:\Users\donat\.m2\repository\com\zaxxer\HikariCP\3.4.5\HikariCP-3.4.5.jar;C:\Users\donat\.m2\repository\org\slf4j\slf4j-api\1.7.30\slf4j-api-1.7.30.jar;C:\Users\donat\.m2\repository\org\springframework\spring-jdbc\5.2.8.RELEASE\spring-jdbc-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-beans\5.2.8.RELEASE\spring-beans-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-tx\5.2.8.RELEASE\spring-tx-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\mysql\mysql-connector-java\8.0.21\mysql-connector-java-8.0.21.jar;C:\Users\donat\.m2\repository\org\springframework\spring-core\5.2.8.RELEASE\spring-core-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-jcl\5.2.8.RELEASE\spring-jcl-5.2.8.RELEASE.jar com.example.springboottransaction.SpringBootTransactionApplication

    .   ____          _            __ _ _
    /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
    \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
    '  |____| .__|_| |_|_| |_\__, | / / / /
    =========|_|==============|___/=/_/_/_/
    :: Spring Boot ::        (v2.3.2.RELEASE)

    2020-07-25 22:10:34.071  INFO 18068 --- [           main] c.e.s.SpringBootTransactionApplication   : Starting SpringBootTransactionApplication on DESKTOP-ADOT1IA with PID 18068 (C:\Users\donat\Downloads\spring-boot-transaction\target\classes started by donat in C:\Users\donat\Downloads\spring-boot-transaction)
    2020-07-25 22:10:34.074  INFO 18068 --- [           main] c.e.s.SpringBootTransactionApplication   : No active profile set, falling back to default profiles: default
    2020-07-25 22:10:34.750  INFO 18068 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
    2020-07-25 22:10:35.493  INFO 18068 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
    2020-07-25 22:10:35.613  INFO 18068 --- [           main] o.s.aop.framework.CglibAopProxy          : Unable to proxy interface-implementing method [public final void org.springframework.dao.support.DaoSupport.afterPropertiesSet() throws java.lang.IllegalArgumentException,org.springframework.beans.factory.BeanInitializationException] because it is marked as final: Consider using interface-based JDK proxies instead!
    2020-07-25 22:10:35.633  INFO 18068 --- [           main] o.s.aop.framework.CglibAopProxy          : Unable to proxy interface-implementing method [public final void org.springframework.dao.support.DaoSupport.afterPropertiesSet() throws java.lang.IllegalArgumentException,org.springframework.beans.factory.BeanInitializationException] because it is marked as final: Consider using interface-based JDK proxies instead!
    2020-07-25 22:10:35.777  INFO 18068 --- [           main] c.e.s.SpringBootTransactionApplication   : Started SpringBootTransactionApplication in 2.062 seconds (JVM running for 2.42)
    Exception in thread "main" java.lang.RuntimeException: throwing exception to test transaction rollback
        at com.example.springboottransaction.service.OrganizationServiceImpl.joinOrganization(OrganizationServiceImpl.java:23)
        at com.example.springboottransaction.service.OrganizationServiceImpl$$FastClassBySpringCGLIB$$3aeac2c9.invoke(<generated>)
        at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
        at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
        at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
        at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367)
        at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
        at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
        at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
        at com.example.springboottransaction.service.OrganizationServiceImpl$$EnhancerBySpringCGLIB$$303122e3.joinOrganization(<generated>)
        at com.example.springboottransaction.SpringBootTransactionApplication.main(SpringBootTransactionApplication.java:27)
    2020-07-25 22:10:35.834  INFO 18068 --- [extShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
    2020-07-25 22:10:35.849  INFO 18068 --- [extShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.

    Process finished with exit code 1


    If we now check the employee and the employeehealthinsurance table there 
    are no records in both so our records are getting roll backed correctly.

    mysql> select * from employee;
    Empty set (0.00 sec)

    mysql> select * from employeeHealthInsurance;
    Empty set (0.00 sec)

---------------------------------------------------------------------------

NOTE: the rollback was made on employee by using @Transactional

---------------------------------------------------------------------------

error encountered:
    
    java.sql.SQLSyntaxErrorException: Unknown database 'bootdb'

    solution:

        bootdb is not yet created

---------------------------------------------------------------------------

error encountered:

    java.sql.SQLException: Access denied for user 'root'@'172.18.0.1' (using password: YES)

    solution:

    no set port on application.properties,

        spring.datasource.url=jdbc:mysql://localhost/bootdb

    should be,

        spring.datasource.url=jdbc:mysql://localhost:3307/bootdb       


---------------------------------------------------------------------------






