reference : https://www.javadevjournal.com/spring-boot/spring-boot-add-filter/

--------------------------------------------------------------------------------------------------------------------

dependency : Spring Web

--------------------------------------------------------------------------------------------------------------------

Introduction
    Filters as the name suggest used to perform filtering on either the
    request to a resource or on the response from a resource, or both.

    Spring Boot provides few options to register custom filters in the Spring Boot application.
    Let’s look at the different options.

    1. Define Spring Boot Filter and Invocation Order
    Implement Filter interface to create a new filter in Spring Boot.

    @Configuration
    @Order(1)
    public class CustomFilter implements Filter {

        private static final Logger LOGGER = LoggerFactory.getLogger(CustomFilter.class);

        @Override
        public void init(FilterConfig filterConfig) throws ServletException {
            LOGGER.info("######## Initiating Custom Filter #######");
        }

        @Override
        public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
            HttpServletRequest request = (HttpServletRequest) servletRequest;
            HttpServletResponse response = (HttpServletResponse) servletResponse;

            LOGGER.info("Login Request {} : {}",request.getMethod(), request.getRequestURI());

            //call next filter in the  filter chain
            filterChain.doFilter(request,response);

            LOGGER.info("Logging Response {} : {}", response.getContentType());
        }

        @Override
        public void destroy() {
            LOGGER.info("######## Destroying Custom Filter #######");
        }
    }

    Let’s quickly look at some important points in the above code

        •	The filter registered by @Component annotation.
        •	To fire filters in the right order–we needed to use the @Order annotation.

    The highest order filter run first.
    This is useful when we want to execute our custom filters on pre-defined order.

    @Component
    @Order(1)
    public class CustomFirstFilter implements Filter {

    }

    @Component
    @Order(2)
    public class CustomSecondFilter implements Filter {

    }
    Copy

    In the above code, CustomFirstFilter will run before the CustomSecondFilter.
    The lower the number, the higher the precedence

--------------------------------------------------------------------------------------------------------------------

2. URL Pattern
    If the convention-based mapping is not flexible enough,we can use
    FilterRegistrationBean for the complete control of the application.

    Here, don’t use @Component annotation for the filter class
    but register the filter using a FilterRegistrationBean.

    public class CustomURLFilter implements Filter {

        private static final Logger LOGGER = LoggerFactory.getLogger(CustomURLFilter.class);


        @Override
        public void init(FilterConfig filterConfig) throws ServletException {
            LOGGER.info("########## Initiating CustomURLFilter filter ##########");

        }

        @Override
        public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
            HttpServletRequest request = (HttpServletRequest) servletRequest;
            HttpServletResponse response = (HttpServletResponse) servletResponse;

            LOGGER.info("This Filter is only called when request is mapped for /customer resource");

            //call next filter in the filter chain
            filterChain.doFilter(request, response);
        }

        @Override
        public void destroy() {
            LOGGER.info("######## Destroying Custom Filter #######");
        }
    }

--------------------------------------------------------------------------------------------------------------------

Register the custom Filter using FilterRegistrationBean.

    @Configuration
    public class AppConfig {
        @Bean
        public FilterRegistrationBean<CustomURLFilter> filterFilterRegistrationBean(){
            FilterRegistrationBean<CustomURLFilter> registrationBean = new FilterRegistrationBean<>();
            CustomURLFilter customURLFilter = new CustomURLFilter();

            registrationBean.setFilter(customURLFilter);
            registrationBean.addUrlPatterns("/greetings");
            registrationBean.setOrder(2);
            return registrationBean;
        }
    }

--------------------------------------------------------------------------------------------------------------------

3. Controller
    Let’s now create a simple spring mvc controller and send an HTTP request to it:

    @RestController
    public class FilterExampleController {
        @GetMapping
        public String greeting(){
            return "hello world";
        }


        @GetMapping("/greeting")
        public String customGreeting(){
            return "hello from custom greeting";
        }
    }

--------------------------------------------------------------------------------------------------------------------

When we start and run our application, following logs can be found in the console.
    "C:\Program Files\Java\jdk-13\bin\java.exe" "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2019.2.3\lib\idea_rt.jar=58526:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2019.2.3\bin" -Dfile.encoding=UTF-8 -classpath "C:\Users\donat\Documents\to be documented\register-custom-filter\target\classes;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot-starter-web\2.3.2.RELEASE\spring-boot-starter-web-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot-starter-json\2.3.2.RELEASE\spring-boot-starter-json-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.11.1\jackson-databind-2.11.1.jar;C:\Users\donat\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.11.1\jackson-annotations-2.11.1.jar;C:\Users\donat\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.11.1\jackson-core-2.11.1.jar;C:\Users\donat\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.11.1\jackson-datatype-jdk8-2.11.1.jar;C:\Users\donat\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.11.1\jackson-datatype-jsr310-2.11.1.jar;C:\Users\donat\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.11.1\jackson-module-parameter-names-2.11.1.jar;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\2.3.2.RELEASE\spring-boot-starter-tomcat-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.37\tomcat-embed-core-9.0.37.jar;C:\Users\donat\.m2\repository\org\glassfish\jakarta.el\3.0.3\jakarta.el-3.0.3.jar;C:\Users\donat\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.37\tomcat-embed-websocket-9.0.37.jar;C:\Users\donat\.m2\repository\org\springframework\spring-web\5.2.8.RELEASE\spring-web-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-beans\5.2.8.RELEASE\spring-beans-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-webmvc\5.2.8.RELEASE\spring-webmvc-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-aop\5.2.8.RELEASE\spring-aop-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-context\5.2.8.RELEASE\spring-context-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-expression\5.2.8.RELEASE\spring-expression-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot-starter\2.3.2.RELEASE\spring-boot-starter-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot\2.3.2.RELEASE\spring-boot-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\2.3.2.RELEASE\spring-boot-autoconfigure-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\boot\spring-boot-starter-logging\2.3.2.RELEASE\spring-boot-starter-logging-2.3.2.RELEASE.jar;C:\Users\donat\.m2\repository\ch\qos\logback\logback-classic\1.2.3\logback-classic-1.2.3.jar;C:\Users\donat\.m2\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar;C:\Users\donat\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.13.3\log4j-to-slf4j-2.13.3.jar;C:\Users\donat\.m2\repository\org\apache\logging\log4j\log4j-api\2.13.3\log4j-api-2.13.3.jar;C:\Users\donat\.m2\repository\org\slf4j\jul-to-slf4j\1.7.30\jul-to-slf4j-1.7.30.jar;C:\Users\donat\.m2\repository\jakarta\annotation\jakarta.annotation-api\1.3.5\jakarta.annotation-api-1.3.5.jar;C:\Users\donat\.m2\repository\org\springframework\spring-core\5.2.8.RELEASE\spring-core-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\springframework\spring-jcl\5.2.8.RELEASE\spring-jcl-5.2.8.RELEASE.jar;C:\Users\donat\.m2\repository\org\yaml\snakeyaml\1.26\snakeyaml-1.26.jar;C:\Users\donat\.m2\repository\org\slf4j\slf4j-api\1.7.30\slf4j-api-1.7.30.jar" com.example.registercustomfilter.RegisterCustomFilterApplication

      .   ____          _            __ _ _
     /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      '  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::        (v2.3.2.RELEASE)

    2020-07-29 13:38:24.072  INFO 11456 --- [           main] c.e.r.RegisterCustomFilterApplication    : Starting RegisterCustomFilterApplication on DESKTOP-ADOT1IA with PID 11456 (C:\Users\donat\Documents\to be documented\register-custom-filter\target\classes started by donat in C:\Users\donat\Documents\to be documented\register-custom-filter)
    2020-07-29 13:38:24.075  INFO 11456 --- [           main] c.e.r.RegisterCustomFilterApplication    : No active profile set, falling back to default profiles: default
    2020-07-29 13:38:25.307  INFO 11456 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
    2020-07-29 13:38:25.320  INFO 11456 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2020-07-29 13:38:25.320  INFO 11456 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
    2020-07-29 13:38:25.391  INFO 11456 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2020-07-29 13:38:25.392  INFO 11456 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1270 ms
    2020-07-29 13:38:25.433  INFO 11456 --- [           main] c.e.r.filter.CustomURLFilter             : ########## Initiating CustomURLFilter filter ##########
    2020-07-29 13:38:25.434  INFO 11456 --- [           main] c.e.r.filter.CustomFilter                : ######## Initiating Custom Filter #######
    2020-07-29 13:38:25.553  INFO 11456 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
    2020-07-29 13:38:25.918  INFO 11456 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
    2020-07-29 13:38:25.927  INFO 11456 --- [           main] c.e.r.RegisterCustomFilterApplication    : Started RegisterCustomFilterApplication in 2.223 seconds (JVM running for 2.62)

    Postman:

    GET     http://localhost:8080/      SEND

    Body:   hello world

    2020-07-29 17:56:51.046  INFO 1464 --- [nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
    2020-07-29 17:56:51.046  INFO 1464 --- [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
    2020-07-29 17:56:51.052  INFO 1464 --- [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 6 ms
    2020-07-29 17:56:51.057  INFO 1464 --- [nio-8080-exec-2] c.e.r.filter.CustomFilter                : Login Request GET : /
    2020-07-29 17:56:51.107  INFO 1464 --- [nio-8080-exec-2] c.e.r.filter.CustomFilter                : Logging Response text/plain;charset=UTF-8 : {}

    GET     http://localhost:8080/greeting      SEND

    Body:   hello from custom greeting

    2020-07-29 17:58:00.847  INFO 1464 --- [nio-8080-exec-5] c.e.r.filter.CustomFilter                : Login Request GET : /greeting
    2020-07-29 17:58:00.849  INFO 1464 --- [nio-8080-exec-5] c.e.r.filter.CustomFilter                : Logging Response text/plain;charset=UTF-8 : {}

--------------------------------------------------------------------------------------------------------------------

4. Servlet @WebFilter Annotation
    If you like to use the Servlet 3.0 annotations, we have the option
    to use the @WebFilter annotation for the filter in Spring Boot.

    This is how we can define a filter using @WebFilter annotation

    @WebFilter("/greeting")
    public class GreetingFilter implements Filter {

        @Override
        public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
            System.out.println("filter for greeting project");
            filterChain.doFilter(servletRequest,servletResponse);
        }
    }
    Copy

    If you are using this annotation, you need to use @ServletComponentScan
    when the application needs to run in embedded container.
